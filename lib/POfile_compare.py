# -*- coding: utf-8 -*-
"""
Created on Fri Apr  6 09:51:00 2018

@author: x00428488
"""

import pandas as pd, numpy as np
import xlsxwriter, tkinter as tk
import datetime, logging, time, os

def write_df_to_worksheet(data, worksheet, filetype=None, cellformat=None):
    '''
    将data写入到worksheet中
    cellformat：将标题栏的format写在前面，普通格式写在后面
    '''
    headerformat_1 = cellformat[0]
    redformat = cellformat[1]
    blueformat = cellformat[2]
    normalformat = cellformat[-1]
    
    for colnum, column in enumerate(data.columns):
        worksheet.write(0, colnum, column, headerformat_1)
        for rownum, value in enumerate(data[column], start=1):
            if (filetype=='Compare') and (data.iloc[rownum-1, -1] not in ['Auto/Mannual', 'Auto']):
                worksheet.write(rownum, colnum, value, redformat)   
            elif (filetype=='Compare') and (data.iloc[rownum-1, -1]=='Auto'):
                worksheet.write(rownum, colnum, value, blueformat)   
            else:
                worksheet.write(rownum, colnum, value, normalformat)   
    worksheet.set_column('A:B', 25)
    worksheet.set_column('C:C', 70)
    worksheet.set_column('D:D', 15)
    worksheet.set_column('F:F', 40)
    worksheet.set_column('G:G', 15)
    if filetype=='Original PO file':
        worksheet.set_column('A:E', 15)
        worksheet.set_column('F:F', 15)
        worksheet.set_column('C:C', 20)
        worksheet.set_column('B:B', 25)
        worksheet.set_column('E:E', 60)
        worksheet.set_column('H:H', 50)
    worksheet.freeze_panes(1, 1)

#
#PO_original_file_path = './templateSourceData/56A03KN_DetailView_20180409.xls'
#PO_autogenerated_file_path = './Results/POfile/POfile_2018-04-11_14-54-22.xlsx'
#savefile_path = './Results/ComparePOfile'
#    
def compare_PO_file(get_text_contents, progressBar, status_info):
    try:
        progressBar.start()   
        paths = get_text_contents()
        for i, path in enumerate(paths):
            paths[i] = path.replace('\n', '')
            logging.debug(str(path[i]))
        
        PO_original_file_path, PO_autogenerated_file_path, savefile_path = paths
        status_info.insert('2.0', '\nmannual file: ' + PO_original_file_path+\
                                  '\nauto file: ' + PO_autogenerated_file_path)
    
        if not os.path.exists(savefile_path):
            os.makedirs(savefile_path)
            
        starttime = time.time()
        status_info.insert('2.0', '\nloading mannual data...')
        
        PO_original_file = pd.read_excel(PO_original_file_path,
                                         header=0, sheet_name='Sheet1')
        PO_original_file['Item Code'] = PO_original_file['Item Code'].astype(str)
        PO_original_file = PO_original_file[['Project No.', 'DU Number', 'DU Name',
                                             'Item Code', 'PR Line Description',
                                             'PR Line Quantity', 'UOM', 'Supplier Name']]
#        status_info.insert('2.0', '\nloading auto data...')
        PO_autogenerated_file = pd.read_excel(PO_autogenerated_file_path, 
                                              header=0, sheet_name='Sheet2')
        PO_autogenerated_file['PO Item Code'] = PO_autogenerated_file[
                                                    'PO Item Code'].astype(str)
        
        status_info.insert('2.0', '\nstart computing...')
        # 计算包含的所有DU
#        DUs_auto = PO_autogenerated_file['DU ID'].unique()
#        DUs_mannual = PO_original_file['DU Number'].unique()
#        DUs = np.unique(np.append(DUs_auto, DUs_mannual))
        DUs = PO_original_file['DU Number'].unique()
#        DUs.reset_index(drop=True, inplace=True)
#        DU_ID = 'Myeik-1_PH2.1_TE'
        summary_compare = pd.DataFrame([])
        summary_origin_PO_file = pd.DataFrame([])
        summary_auto_PO_file = pd.DataFrame([])
        for DU_ID in DUs:
            DU_PO_original_file = PO_original_file[
                                    PO_original_file['DU Number'].str.contains(DU_ID)]
            
            DU_PO_autogenerated_file = PO_autogenerated_file[
                                    PO_autogenerated_file['DU ID'].str.contains(DU_ID)]
            
            
            Result_PO_file = DU_PO_original_file[['DU Number', 'Item Code', 
                                                 'PR Line Description', 'PR Line Quantity',
                                                 'UOM', 'Supplier Name']].copy()
            Result_PO_file['Flag'] = 'Only mannual'
            DU_PO_autogenerated_format = DU_PO_autogenerated_file[['DU ID', 'PO Item Code',
                                                                  'PR Line Description',
                                                                  'PR Line Quantity',
                                                                  'UOM', 'Supplier Name']].copy()
#            DU_PO_autogenerated_format['Supplier Name'] = 'ABC' # 临时值
            DU_PO_autogenerated_format['Flag'] = 'Auto'
            DU_PO_autogenerated_format.columns = Result_PO_file.columns
            DU_PO_autogenerated_format.reset_index(drop=True, inplace=True)
            Result_PO_file.reset_index(drop=True, inplace=True)
#            Result_PO_file.set_index
            logging.debug('Starting comparing ...')
            for Item in Result_PO_file['Item Code']:
                if Item in DU_PO_autogenerated_format['Item Code'].values:
                    if Result_PO_file[Result_PO_file['Item Code']==Item]['PR Line Quantity'].iloc[0] ==\
                        DU_PO_autogenerated_format[DU_PO_autogenerated_format[\
                                'Item Code']==Item]['PR Line Quantity'].iloc[0]:
                            logging.debug(Item + ': the same')
                            indexrow = Result_PO_file[Result_PO_file['Item Code']==Item].index
                            Result_PO_file.loc[indexrow, 'Flag']='Auto/Mannual'
                            DU_PO_autogenerated_format.drop(DU_PO_autogenerated_format[
                                    DU_PO_autogenerated_format['Item Code']==Item].index, inplace=True)
                    else:
                        Result_PO_file[Result_PO_file['Item Code']==Item]['Flag']='Qty not match'
                        Result_PO_file = Result_PO_file.append(DU_PO_autogenerated_format[
                                DU_PO_autogenerated_format['Item Code']==Item], ignore_index=True)
                        logging.debug(Item+': qty not right')
                else:
                    pass
                
            Result_PO_file = Result_PO_file.append(DU_PO_autogenerated_format, ignore_index=True)
            Result_PO_file.sort_values(by=['DU Number', 'PR Line Description', 'Flag'], inplace=True)
            
            #Result_PO_file = Result_PO_file.append(DU_PO_autogenerated_format, ignore_index=True)

            filepath = savefile_path+'/'+str(DU_ID)+'__PO_compare_result_'+datetime.datetime.now(). \
                                strftime('%Y-%m-%d_%H-%M-%S')+'.xlsx'
            workbook = xlsxwriter.Workbook(filepath, 
                                               {'nan_inf_to_errors': True,
                                                'strings_to_numbers': False})
            headerformat_1 = workbook.add_format({'font_name': 'Arial', 'font_size': 11,
                                                  'bold': 1, 'text_wrap': 1, 
                                                  'bg_color': 'yellow', 'border': 1,
                                                  'align': 'left', 'valign': 'vcenter',})
            normalformat = workbook.add_format({'font_name':'Arial', 'font_size':11,
                                                'align':'left', 'valign':'vcenter',
                                                'border': 1, 'bg_color': '#00FA9A'})
            redformat = workbook.add_format({'font_name':'Arial', 'font_size':11,
                                             'align':'left', 'valign':'vcenter',
                                             'border':1, 'bg_color': '#FF6347'})
            blueformat = workbook.add_format({'font_name':'Arial', 'font_size':11,
                                             'align':'left', 'valign':'vcenter',
                                             'border':1, 'bg_color': '#00BFFF'})
            cellformat=[headerformat_1, redformat, blueformat, normalformat]                         
            sheet1 = workbook.add_worksheet(name='Sub PO Compare')
            sheet2 = workbook.add_worksheet(name='Mannual Sub PO List')
            sheet3 = workbook.add_worksheet(name='Auto Sub PO List')
            
            write_df_to_worksheet(Result_PO_file, sheet1, filetype='Compare', 
                                  cellformat=cellformat)
            write_df_to_worksheet(DU_PO_original_file, sheet2, filetype='Original PO file', 
                                  cellformat=cellformat)
            write_df_to_worksheet(DU_PO_autogenerated_file, sheet3, 
                                  cellformat=cellformat)
            workbook.close()
            
            summary_compare = summary_compare.append(Result_PO_file, ignore_index=True)
            summary_origin_PO_file = summary_origin_PO_file.append(
                                        DU_PO_original_file, ignore_index=True)
            summary_auto_PO_file = summary_auto_PO_file.append(
                                    DU_PO_autogenerated_file, ignore_index=True)
            logging.debug('\ncomparing: '+ str(DU_ID))
            status_info.insert('2.0', '\ncomparing: '+ str(DU_ID))
            status_info.insert('2.0', '\nfile saved to: '+ filepath)
            
            
        # 将单个文件汇总到一个excel 表格
        status_info.insert('2.0', '\nwriting summary file...')
        sum_file_path = savefile_path+'/Summary_compare_result_'+\
                datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')+'.xlsx'
        workbook_sum = xlsxwriter.Workbook(sum_file_path,
                                           {'nan_inf_to_errors': True,
                                            'strings_to_numbers': False})
        headerformat_1 = workbook_sum.add_format({'font_name': 'Arial', 'font_size': 11,
                                              'bold': 1, 'text_wrap': 1, 
                                              'bg_color': 'yellow', 'border': 1,
                                              'align': 'left', 'valign': 'vcenter',})
        normalformat = workbook_sum.add_format({'font_name':'Arial', 'font_size':11,
                                            'align':'left', 'valign':'vcenter',
                                            'border': 1, 'bg_color': '#00FA9A'})
        redformat = workbook_sum.add_format({'font_name':'Arial', 'font_size':11,
                                         'align':'left', 'valign':'vcenter',
                                         'border':1, 'bg_color': '#FF6347'})
        blueformat = workbook_sum.add_format({'font_name':'Arial', 'font_size':11,
                                             'align':'left', 'valign':'vcenter',
                                             'border':1, 'bg_color': '#00BFFF'})
        cellformat=[headerformat_1, redformat, blueformat, normalformat]                         
        sheet11 = workbook_sum.add_worksheet(name='Sub PO Compare')
        sheet22 = workbook_sum.add_worksheet(name='Mannual Sub PO List')
        sheet33 = workbook_sum.add_worksheet(name='Auto Sub PO List')
        write_df_to_worksheet(summary_compare, sheet11, filetype='Compare', 
                              cellformat=cellformat)
        write_df_to_worksheet(summary_origin_PO_file, sheet22, filetype='Original PO file', 
                              cellformat=cellformat)
        write_df_to_worksheet(summary_auto_PO_file, sheet33, 
                              cellformat=cellformat)
        workbook_sum.close()
        status_info.insert('2.0', '\nsummary file saved to: '+ sum_file_path)
        
        # 显示处理结果
        progressBar.stop()
        endtime = time.time()
        DU_total = str(len(DUs))
        costtime = str(endtime-starttime)
        result_mesg = 'Generated '+DU_total+' DUs compare report, cost '+costtime+' seconds!'
        logging.debug(result_mesg)
        status_info.insert('2.0', '\n'+ str(result_mesg))
        choice = tk.messagebox.askyesno(title='Finished', 
                                        message=result_mesg+'\nDo you want to open it?')
        if choice:
            os.startfile(savefile_path)
    except Exception as e:
        logging.debug(e)
        progressBar.stop()
        tk.messagebox.showerror(title='Error', message=e)
        status_info.insert('2.0', '\n'+ str(e))